## DockerFile
# Use an official OpenJDK runtime as a parent image
FROM openjdk:17-jdk-alpine

# Set the working directory
WORKDIR /app

# Copy the application JAR file to the container (Jar파일 복사)
COPY build/libs/test.jar /app/test.jar

# Expose the port the app runs on
EXPOSE 8080

# Run the application
ENTRYPOINT ["java", "-jar", "/app/test.jar"]

## GitHub Actions Workflow
# .github/workflows/ci-cd.yml 경로
name: CI/CD PIPELINE

on:
  push: # 트리거
    branches:
      - main
  pull_request: # 트리거
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps: 
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 17 #JDK17 설정
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Cache Gradle packages #Gradle 캐시 사용
      uses: actions/chache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle #Gradle 사용하여 애플리케이션 빌드
      run: ./gradlew build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }} #시크릿 설정 (Settins/Secrets and variables/New repository secret)
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} #시크릿 설정

    - name: Build and push Docker image #Docker 이미지 빌드, Docker Hub에 푸시
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/test:latest
        
